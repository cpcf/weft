// Code generated by gogenkit. DO NOT EDIT.

package userapi

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// Client provides access to the User Management API API
type Client struct {
	baseURL    string
	httpClient *http.Client
	authToken  string
	userAgent  string
}

// ClientOption represents a configuration option for the client
type ClientOption func(*Client)

// NewClient creates a new User Management API API client
func NewClient(options ...ClientOption) *Client {
	client := &Client{
		baseURL: "https://api.example.com/v1",
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		userAgent: "user-management-api-go-client/1.0.0",
	}

	for _, option := range options {
		option(client)
	}

	return client
}

// WithBaseURL sets the base URL for API requests
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) {
		c.baseURL = strings.TrimSuffix(baseURL, "/")
	}
}

// WithHTTPClient sets the HTTP client to use for requests
func WithHTTPClient(httpClient *http.Client) ClientOption {
	return func(c *Client) {
		c.httpClient = httpClient
	}
}

// WithBearerToken sets the bearer token for authentication
func WithBearerToken(token string) ClientOption {
	return func(c *Client) {
		c.authToken = token
	}
}

// WithUserAgent sets the User-Agent header for requests
func WithUserAgent(userAgent string) ClientOption {
	return func(c *Client) {
		c.userAgent = userAgent
	}
}

// GetUser Retrieve a user by ID
func (c *Client) GetUser(ctx context.Context, id int64) (User, error) {
	// Build URL path
	path := "/users/{id}"
	path = strings.ReplaceAll(path, "{id}", "strconv.FormatInt(id, 10)")

	// Build URL
	u, err := url.Parse(c.baseURL + path)
	if err != nil {
		return User{}, NewClientError("parse_url", err)
	}

	// Create HTTP request
	httpReq, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return User{}, NewClientError("create_request", err)
	}

	// Set headers
	httpReq.Header.Set("User-Agent", c.userAgent)
	httpReq.Header.Set("Accept", "application/json")
	// Set authorization header
	if c.authToken != "" {
		httpReq.Header.Set("Authorization", "Bearer "+c.authToken)
	}

	// Execute request
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return User{}, NewClientError("execute_request", err)
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return User{}, NewClientError("read_response", err)
	}

	// Handle error responses
	if resp.StatusCode >= 400 {
		apiErr := &APIError{
			StatusCode: resp.StatusCode,
		}

		if len(respBody) > 0 {
			if err := json.Unmarshal(respBody, apiErr); err != nil {
				// Fallback to simple message
				apiErr.Message = string(respBody)
			}
		} else {
			apiErr.Message = http.StatusText(resp.StatusCode)
		}

		return User{}, apiErr
	}
	// Parse response
	var result User

	if len(respBody) > 0 {
		if err := json.Unmarshal(respBody, &result); err != nil {
			return User{}, NewClientError("unmarshal_response", err)
		}
	}

	return result, nil
}

// ListUsers List all users with optional filtering
func (c *Client) ListUsers(ctx context.Context, status *UserStatus, limit *int, offset *int) ([]User, error) {
	// Build URL path
	path := "/users"

	// Build URL
	u, err := url.Parse(c.baseURL + path)
	if err != nil {
		return nil, NewClientError("parse_url", err)
	}
	// Add query parameters
	query := u.Query()
	if status != nil {
		query.Set("status", (*status).String())
	}
	if limit != nil {
		query.Set("limit", strconv.Itoa(*limit))
	}
	if offset != nil {
		query.Set("offset", strconv.Itoa(*offset))
	}
	u.RawQuery = query.Encode()

	// Create HTTP request
	httpReq, err := http.NewRequestWithContext(ctx, "GET", u.String(), nil)
	if err != nil {
		return nil, NewClientError("create_request", err)
	}

	// Set headers
	httpReq.Header.Set("User-Agent", c.userAgent)
	httpReq.Header.Set("Accept", "application/json")
	// Set authorization header
	if c.authToken != "" {
		httpReq.Header.Set("Authorization", "Bearer "+c.authToken)
	}

	// Execute request
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return nil, NewClientError("execute_request", err)
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, NewClientError("read_response", err)
	}

	// Handle error responses
	if resp.StatusCode >= 400 {
		apiErr := &APIError{
			StatusCode: resp.StatusCode,
		}

		if len(respBody) > 0 {
			if err := json.Unmarshal(respBody, apiErr); err != nil {
				// Fallback to simple message
				apiErr.Message = string(respBody)
			}
		} else {
			apiErr.Message = http.StatusText(resp.StatusCode)
		}

		return nil, apiErr
	}
	// Parse response
	var result []User

	if len(respBody) > 0 {
		if err := json.Unmarshal(respBody, &result); err != nil {
			return nil, NewClientError("unmarshal_response", err)
		}
	}

	return result, nil
}

// CreateUser Create a new user
func (c *Client) CreateUser(ctx context.Context, req CreateUserRequest) (User, error) {
	// Build URL path
	path := "/users"

	// Build URL
	u, err := url.Parse(c.baseURL + path)
	if err != nil {
		return User{}, NewClientError("parse_url", err)
	}
	// Serialize request body
	var body io.Reader
	if req != (CreateUserRequest{}) {
		jsonData, err := json.Marshal(req)
		if err != nil {
			return User{}, NewClientError("marshal_request", err)
		}
		body = bytes.NewReader(jsonData)
	}

	// Create HTTP request
	httpReq, err := http.NewRequestWithContext(ctx, "POST", u.String(), body)
	if err != nil {
		return User{}, NewClientError("create_request", err)
	}

	// Set headers
	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("User-Agent", c.userAgent)
	httpReq.Header.Set("Accept", "application/json")
	// Set authorization header
	if c.authToken != "" {
		httpReq.Header.Set("Authorization", "Bearer "+c.authToken)
	}

	// Execute request
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return User{}, NewClientError("execute_request", err)
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return User{}, NewClientError("read_response", err)
	}

	// Handle error responses
	if resp.StatusCode >= 400 {
		apiErr := &APIError{
			StatusCode: resp.StatusCode,
		}

		if len(respBody) > 0 {
			if err := json.Unmarshal(respBody, apiErr); err != nil {
				// Fallback to simple message
				apiErr.Message = string(respBody)
			}
		} else {
			apiErr.Message = http.StatusText(resp.StatusCode)
		}

		return User{}, apiErr
	}
	// Parse response
	var result User

	if len(respBody) > 0 {
		if err := json.Unmarshal(respBody, &result); err != nil {
			return User{}, NewClientError("unmarshal_response", err)
		}
	}

	return result, nil
}

// UpdateUser Update user information
func (c *Client) UpdateUser(ctx context.Context, id int64, req UpdateUserRequest) (User, error) {
	// Build URL path
	path := "/users/{id}"
	path = strings.ReplaceAll(path, "{id}", "strconv.FormatInt(id, 10)")

	// Build URL
	u, err := url.Parse(c.baseURL + path)
	if err != nil {
		return User{}, NewClientError("parse_url", err)
	}
	// Serialize request body
	var body io.Reader
	if req != (UpdateUserRequest{}) {
		jsonData, err := json.Marshal(req)
		if err != nil {
			return User{}, NewClientError("marshal_request", err)
		}
		body = bytes.NewReader(jsonData)
	}

	// Create HTTP request
	httpReq, err := http.NewRequestWithContext(ctx, "PATCH", u.String(), body)
	if err != nil {
		return User{}, NewClientError("create_request", err)
	}

	// Set headers
	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("User-Agent", c.userAgent)
	httpReq.Header.Set("Accept", "application/json")
	// Set authorization header
	if c.authToken != "" {
		httpReq.Header.Set("Authorization", "Bearer "+c.authToken)
	}

	// Execute request
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return User{}, NewClientError("execute_request", err)
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return User{}, NewClientError("read_response", err)
	}

	// Handle error responses
	if resp.StatusCode >= 400 {
		apiErr := &APIError{
			StatusCode: resp.StatusCode,
		}

		if len(respBody) > 0 {
			if err := json.Unmarshal(respBody, apiErr); err != nil {
				// Fallback to simple message
				apiErr.Message = string(respBody)
			}
		} else {
			apiErr.Message = http.StatusText(resp.StatusCode)
		}

		return User{}, apiErr
	}
	// Parse response
	var result User

	if len(respBody) > 0 {
		if err := json.Unmarshal(respBody, &result); err != nil {
			return User{}, NewClientError("unmarshal_response", err)
		}
	}

	return result, nil
}

// DeleteUser Delete a user by ID
func (c *Client) DeleteUser(ctx context.Context, id int64) (bool, error) {
	// Build URL path
	path := "/users/{id}"
	path = strings.ReplaceAll(path, "{id}", "strconv.FormatInt(id, 10)")

	// Build URL
	u, err := url.Parse(c.baseURL + path)
	if err != nil {
		return false, NewClientError("parse_url", err)
	}

	// Create HTTP request
	httpReq, err := http.NewRequestWithContext(ctx, "DELETE", u.String(), nil)
	if err != nil {
		return false, NewClientError("create_request", err)
	}

	// Set headers
	httpReq.Header.Set("User-Agent", c.userAgent)
	httpReq.Header.Set("Accept", "application/json")
	// Set authorization header
	if c.authToken != "" {
		httpReq.Header.Set("Authorization", "Bearer "+c.authToken)
	}

	// Execute request
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return false, NewClientError("execute_request", err)
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return false, NewClientError("read_response", err)
	}

	// Handle error responses
	if resp.StatusCode >= 400 {
		apiErr := &APIError{
			StatusCode: resp.StatusCode,
		}

		if len(respBody) > 0 {
			if err := json.Unmarshal(respBody, apiErr); err != nil {
				// Fallback to simple message
				apiErr.Message = string(respBody)
			}
		} else {
			apiErr.Message = http.StatusText(resp.StatusCode)
		}

		return false, apiErr
	}
	// Boolean response - success means true
	return resp.StatusCode >= 200 && resp.StatusCode < 300, nil
}
