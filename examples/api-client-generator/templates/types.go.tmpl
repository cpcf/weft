// Code generated by gogenkit. DO NOT EDIT.

package {{.API.Package}}

import (
	"time"
)

{{- range .API.Types}}
{{- if eq .Type "struct"}}

// {{.Name}} {{.Description}}
type {{.Name}} struct {
{{- range .Fields}}
	{{.Name}} {{.Type}} `{{range $key, $value := .Tags}}{{$key}}:"{{$value}}"{{end}}`{{if .Description}} // {{.Description}}{{end}}
{{- end}}
}
{{- else if eq .Type "enum"}}

// {{.Name}} {{.Description}}
type {{.Name}} {{.BaseType}}

const (
{{- $typeName := .Name}}
{{- range $i, $value := .Values}}
	{{$typeName}}{{pascal $value}} {{$typeName}} = "{{$value}}"
{{- end}}
)

// Valid{{.Name}}Values returns all valid values for {{.Name}}
func Valid{{.Name}}Values() []{{.Name}} {
	return []{{.Name}}{
{{- range .Values}}
		{{$typeName}}{{pascal .}},
{{- end}}
	}
}

// IsValid returns true if the {{.Name}} value is valid
func (s {{.Name}}) IsValid() bool {
	switch s {
{{- range .Values}}
	case {{$typeName}}{{pascal .}}:
		return true
{{- end}}
	}
	return false
}

// String returns the string representation of {{.Name}}
func (s {{.Name}}) String() string {
	return string(s)
}
{{- else if eq .Type "alias"}}

// {{.Name}} {{.Description}}
type {{.Name}} {{.BaseType}}
{{- end}}
{{- end}}