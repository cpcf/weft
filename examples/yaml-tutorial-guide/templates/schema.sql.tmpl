{{/*
Template: schema.sql.tmpl  
Purpose: Generate SQL DDL statements to create database tables

This template shows how to generate non-Go files using your YAML configuration.
You can generate any text-based file format: SQL, HTML, JSON, configuration files, etc.
*/}}

-- Database Schema: {{ .Schema.Name }}
-- Version: {{ .Schema.Version }}
{{- if .Schema.Description }}
-- Description: {{ .Schema.Description }}
{{- end }}
-- Generated by weft

-- Database: {{ .Schema.Database.Name }}
-- Driver: {{ .Schema.Database.Driver }}

{{/* Generate CREATE TABLE statements for each table */}}
{{- range $tableIndex, $table := .Schema.Tables }}

-- Table: {{ $table.Name }}
{{- if $table.Description }}
-- {{ $table.Description }}
{{- end }}
CREATE TABLE {{ $table.Name }} (
    {{- range $fieldIndex, $field := $table.Fields }}
    {{- $sqlType := "TEXT" }}
    {{- $driver := $.Schema.Database.Driver }}
    {{- if eq $driver "postgres" }}
        {{- if eq $field.Type "string" }}{{ $sqlType = "VARCHAR(255)" }}{{ end }}
        {{- if eq $field.Type "text" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "integer" }}{{ $sqlType = "INTEGER" }}{{ end }}
        {{- if eq $field.Type "bigint" }}{{ $sqlType = "BIGINT" }}{{ end }}
        {{- if eq $field.Type "decimal" }}{{ $sqlType = "DECIMAL(10,2)" }}{{ end }}
        {{- if eq $field.Type "float" }}{{ $sqlType = "REAL" }}{{ end }}
        {{- if eq $field.Type "boolean" }}{{ $sqlType = "BOOLEAN" }}{{ end }}
        {{- if eq $field.Type "date" }}{{ $sqlType = "DATE" }}{{ end }}
        {{- if eq $field.Type "timestamp" }}{{ $sqlType = "TIMESTAMP WITH TIME ZONE" }}{{ end }}
        {{- if eq $field.Type "uuid" }}{{ $sqlType = "UUID" }}{{ end }}
        {{- if eq $field.Type "json" }}{{ $sqlType = "JSONB" }}{{ end }}
    {{- else if eq $driver "mysql" }}
        {{- if eq $field.Type "string" }}{{ $sqlType = "VARCHAR(255)" }}{{ end }}
        {{- if eq $field.Type "text" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "integer" }}{{ $sqlType = "INT" }}{{ end }}
        {{- if eq $field.Type "bigint" }}{{ $sqlType = "BIGINT" }}{{ end }}
        {{- if eq $field.Type "decimal" }}{{ $sqlType = "DECIMAL(10,2)" }}{{ end }}
        {{- if eq $field.Type "float" }}{{ $sqlType = "FLOAT" }}{{ end }}
        {{- if eq $field.Type "boolean" }}{{ $sqlType = "BOOLEAN" }}{{ end }}
        {{- if eq $field.Type "date" }}{{ $sqlType = "DATE" }}{{ end }}
        {{- if eq $field.Type "timestamp" }}{{ $sqlType = "TIMESTAMP" }}{{ end }}
        {{- if eq $field.Type "uuid" }}{{ $sqlType = "CHAR(36)" }}{{ end }}
        {{- if eq $field.Type "json" }}{{ $sqlType = "JSON" }}{{ end }}
    {{- else }}
        {{- if eq $field.Type "string" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "text" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "integer" }}{{ $sqlType = "INTEGER" }}{{ end }}
        {{- if eq $field.Type "bigint" }}{{ $sqlType = "INTEGER" }}{{ end }}
        {{- if eq $field.Type "decimal" }}{{ $sqlType = "REAL" }}{{ end }}
        {{- if eq $field.Type "float" }}{{ $sqlType = "REAL" }}{{ end }}
        {{- if eq $field.Type "boolean" }}{{ $sqlType = "INTEGER" }}{{ end }}
        {{- if eq $field.Type "date" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "timestamp" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "uuid" }}{{ $sqlType = "TEXT" }}{{ end }}
        {{- if eq $field.Type "json" }}{{ $sqlType = "TEXT" }}{{ end }}
    {{- end }}
    {{- $constraints := "" }}
    {{- if $field.Required }}{{ $constraints = printf "%s NOT NULL" $constraints }}{{ end }}
    {{- if $field.PrimaryKey }}{{ $constraints = printf "%s PRIMARY KEY" $constraints }}{{ end }}
    {{- if $field.Unique }}{{ $constraints = printf "%s UNIQUE" $constraints }}{{ end }}
    {{- if $field.DefaultValue }}{{ $constraints = printf "%s DEFAULT %s" $constraints $field.DefaultValue }}{{ end }}
    {{ $field.Name }} {{ $sqlType }}{{ $constraints }}{{- if ne $fieldIndex (len $table.Fields | add -1) }},{{ end }}
    {{- end }}
);

{{/* Generate indexes for foreign keys and unique constraints */}}
{{- range .Fields }}
{{- if .ForeignKey }}
CREATE INDEX idx_{{ $table.Name }}_{{ .Name }} ON {{ $table.Name }}({{ .Name }});
{{- end }}
{{- if .Unique }}
CREATE UNIQUE INDEX idx_{{ $table.Name }}_{{ .Name }}_unique ON {{ $table.Name }}({{ .Name }});
{{- end }}
{{- end }}
{{- end }}