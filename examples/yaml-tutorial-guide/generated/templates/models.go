// Code generated by weft. DO NOT EDIT.

package ecommerce

import (
	"time"
)

// Users represents a record from the users table.
// System users including customers and administrators
type Users struct {
	Id            string    `json:"id" db:"id"`                       // Primary key: Unique user identifier
	Email         string    `json:"email" db:"email"`                 // User email address for login
	First_name    string    `json:"first_name" db:"first_name"`       // User's first name
	Last_name     string    `json:"last_name" db:"last_name"`         // User's last name
	Password_hash string    `json:"password_hash" db:"password_hash"` // Encrypted password hash
	Role          string    `json:"role" db:"role"`                   // User role (customer, admin, etc.)
	Is_active     bool      `json:"is_active" db:"is_active"`         // Whether the user account is active
	Created_at    time.Time `json:"created_at" db:"created_at"`       // Account creation timestamp
	Updated_at    time.Time `json:"updated_at" db:"updated_at"`       // Last account update timestamp
}

// TableName returns the database table name for Users
func (m *Users) TableName() string {
	return "users"
}

// Categories represents a record from the categories table.
// Product categories for organizing the catalog
type Categories struct {
	Id          string    `json:"id" db:"id"`                   // Primary key: Unique category identifier
	Name        string    `json:"name" db:"name"`               // Category display name
	Slug        string    `json:"slug" db:"slug"`               // URL-friendly category identifier
	Description string    `json:"description" db:"description"` // Category description
	Parent_id   string    `json:"parent_id" db:"parent_id"`     // Foreign key to categories.id: Parent category for hierarchical organization
	Created_at  time.Time `json:"created_at" db:"created_at"`   // Category creation timestamp
}

// TableName returns the database table name for Categories
func (m *Categories) TableName() string {
	return "categories"
}

// Products represents a record from the products table.
// Product catalog with all available items
type Products struct {
	Id             string      `json:"id" db:"id"`                         // Primary key: Unique product identifier
	Category_id    string      `json:"category_id" db:"category_id"`       // Foreign key to categories.id: Product category reference
	Name           string      `json:"name" db:"name"`                     // Product display name
	Slug           string      `json:"slug" db:"slug"`                     // URL-friendly product identifier
	Description    string      `json:"description" db:"description"`       // Detailed product description
	Price          float64     `json:"price" db:"price"`                   // Product price in cents
	Stock_quantity int64       `json:"stock_quantity" db:"stock_quantity"` // Available inventory count
	Sku            string      `json:"sku" db:"sku"`                       // Stock keeping unit identifier
	Is_active      bool        `json:"is_active" db:"is_active"`           // Whether the product is available for purchase
	Metadata       interface{} `json:"metadata" db:"metadata"`             // Additional product attributes (color, size, etc.)
	Created_at     time.Time   `json:"created_at" db:"created_at"`         // Product creation timestamp
	Updated_at     time.Time   `json:"updated_at" db:"updated_at"`         // Last product update timestamp
}

// TableName returns the database table name for Products
func (m *Products) TableName() string {
	return "products"
}

// Orders represents a record from the orders table.
// Customer orders and purchase history
type Orders struct {
	Id               string      `json:"id" db:"id"`                             // Primary key: Unique order identifier
	User_id          string      `json:"user_id" db:"user_id"`                   // Foreign key to users.id: Customer who placed the order
	Order_number     string      `json:"order_number" db:"order_number"`         // Human-readable order number
	Status           string      `json:"status" db:"status"`                     // Order status (pending, processing, shipped, delivered, cancelled)
	Total_amount     float64     `json:"total_amount" db:"total_amount"`         // Total order amount in cents
	Shipping_address interface{} `json:"shipping_address" db:"shipping_address"` // Shipping address details
	Billing_address  interface{} `json:"billing_address" db:"billing_address"`   // Billing address details
	Notes            string      `json:"notes" db:"notes"`                       // Order notes or special instructions
	Created_at       time.Time   `json:"created_at" db:"created_at"`             // Order creation timestamp
	Updated_at       time.Time   `json:"updated_at" db:"updated_at"`             // Last order update timestamp
}

// TableName returns the database table name for Orders
func (m *Orders) TableName() string {
	return "orders"
}

// Order_items represents a record from the order_items table.
// Individual items within customer orders
type Order_items struct {
	Id          string    `json:"id" db:"id"`                   // Primary key: Unique order item identifier
	Order_id    string    `json:"order_id" db:"order_id"`       // Foreign key to orders.id: Parent order reference
	Product_id  string    `json:"product_id" db:"product_id"`   // Foreign key to products.id: Product being ordered
	Quantity    int64     `json:"quantity" db:"quantity"`       // Number of items ordered
	Unit_price  float64   `json:"unit_price" db:"unit_price"`   // Price per unit at time of order
	Total_price float64   `json:"total_price" db:"total_price"` // Total price for this line item
	Created_at  time.Time `json:"created_at" db:"created_at"`   // Order item creation timestamp
}

// TableName returns the database table name for Order_items
func (m *Order_items) TableName() string {
	return "order_items"
}
